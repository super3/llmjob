name: Update Stats

on:
  schedule:
    # Run every 24 hours at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-stats:
    runs-on: ubuntu-latest
    
    steps:      
      - name: Fetch Clerk stats and update Gist
        env:
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIST_ID: ${{ secrets.STATS_GIST_ID }}
        run: |
          # Create a Node.js script to fetch stats and update Gist
          cat > update-stats.js << 'EOF'
          const https = require('https');

          const CLERK_SECRET_KEY = process.env.CLERK_SECRET_KEY;
          const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
          const GIST_ID = process.env.GIST_ID;

          if (!CLERK_SECRET_KEY || !GITHUB_TOKEN || !GIST_ID) {
            console.error('Required environment variables are not set');
            process.exit(1);
          }

          // Fetch stats from Clerk
          function fetchClerkStats() {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.clerk.com',
                path: '/v1/users?limit=1',
                method: 'GET',
                headers: {
                  'Authorization': `Bearer ${CLERK_SECRET_KEY}`,
                  'Content-Type': 'application/json'
                }
              };

              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => {
                  try {
                    const response = JSON.parse(data);
                    const userCount = response.total_count || 0;
                    
                    const stats = {
                      users: userCount,
                      timestamp: new Date().toISOString(),
                      tokens_processed: "1.2M",
                      models_available: 2,
                      online_nodes: 2
                    };
                    
                    resolve(stats);
                  } catch (error) {
                    reject(error);
                  }
                });
              });

              req.on('error', reject);
              req.end();
            });
          }

          // Update GitHub Gist
          function updateGist(stats) {
            return new Promise((resolve, reject) => {
              const data = JSON.stringify({
                files: {
                  'llmjob-stats.json': {
                    content: JSON.stringify(stats, null, 2)
                  }
                }
              });

              const options = {
                hostname: 'api.github.com',
                path: `/gists/${GIST_ID}`,
                method: 'PATCH',
                headers: {
                  'Authorization': `token ${GITHUB_TOKEN}`,
                  'Content-Type': 'application/json',
                  'User-Agent': 'LLMJob-Stats-Updater',
                  'Content-Length': data.length
                }
              };

              const req = https.request(options, (res) => {
                let response = '';
                res.on('data', (chunk) => response += chunk);
                res.on('end', () => {
                  if (res.statusCode === 200) {
                    console.log('Gist updated successfully');
                    resolve();
                  } else {
                    reject(new Error(`Failed to update gist: ${res.statusCode} - ${response}`));
                  }
                });
              });

              req.on('error', reject);
              req.write(data);
              req.end();
            });
          }

          // Main execution
          fetchClerkStats()
            .then(stats => {
              console.log('Stats fetched:', stats);
              return updateGist(stats);
            })
            .then(() => console.log('Stats successfully updated in Gist'))
            .catch(error => {
              console.error('Error:', error);
              process.exit(1);
            });
          EOF
          
          # Run the script
          node update-stats.js